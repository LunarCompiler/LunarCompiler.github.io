<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>linux文件编程</title>
    <link href="/2024/11/19/linux%E6%96%87%E4%BB%B6%E7%BC%96%E7%A8%8B/"/>
    <url>/2024/11/19/linux%E6%96%87%E4%BB%B6%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h4 id="探索"><a href="#探索" class="headerlink" title="探索"></a>探索</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">fopen fread fwrite fseek fclose<br><br>fgetc fputc feof<br><br>与 opem...有何区别,具体怎么用百度<br><br>https:<span class="hljs-comment">//www.cnblogs.com/NickyYe/p/5497659.html</span><br></code></pre></td></tr></table></figure><h4 id="open-函数"><a href="#open-函数" class="headerlink" title="open 函数"></a>open 函数</h4><p>函数定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">open</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *pathname, <span class="hljs-type">int</span> flags, ...<span class="hljs-comment">/* mode_t mode */</span> )</span>;<br></code></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> fd = open(<span class="hljs-string">&quot;./file2&quot;</span>, O_RDWR);<br><br>        <span class="hljs-keyword">if</span>(fd == <span class="hljs-number">-1</span>)<br>        &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;file2 open err fd :%d\n&quot;</span>,fd);<br>                fd = open(<span class="hljs-string">&quot;./file2&quot;</span>,O_RDWR|O_CREAT,<span class="hljs-number">0600</span>);<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;create file2...\n&quot;</span>);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;fd: %d\n&quot;</span>,fd);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="write-函数"><a href="#write-函数" class="headerlink" title="write 函数"></a>write 函数</h4><p>函数定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">write</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">const</span> <span class="hljs-type">void</span> buf[.count], <span class="hljs-type">size_t</span> count)</span>;<br></code></pre></td></tr></table></figure><p>示例:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> fd = open(<span class="hljs-string">&quot;./file2&quot;</span>, O_RDWR);<br>        <span class="hljs-type">char</span> *buf = <span class="hljs-string">&quot;wangtong shuai!&quot;</span>;<br><br>        <span class="hljs-keyword">if</span>(fd == <span class="hljs-number">-1</span>)<br>        &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;file2 open err fd :%d\n&quot;</span>,fd);<br>                fd = open(<span class="hljs-string">&quot;./file2&quot;</span>,O_RDWR|O_CREAT,<span class="hljs-number">0600</span>);<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;create file2...\n&quot;</span>);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;fd: %d\n&quot;</span>,fd);<br>   <span class="hljs-comment">// ssize_t write(int fd, const void buf[.count], size_t count);</span><br>        <span class="hljs-type">int</span> n_write = write(fd,buf,<span class="hljs-built_in">strlen</span>(buf));<br>        <span class="hljs-keyword">if</span>(n_write != <span class="hljs-number">-1</span>)<br>        &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;write %d byte to file2\n&quot;</span>,n_write);<br>        &#125;<br><br>        close(fd);<br>        open(<span class="hljs-string">&quot;./file2&quot;</span>, O_RDWR);<br><br>        <span class="hljs-type">char</span> *read_buf;<br>        read_buf =(<span class="hljs-type">char</span> *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span>)* n_write + <span class="hljs-number">1</span>);<br>        <span class="hljs-type">int</span> n_read = read(fd,read_buf,n_write);<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;read:%d,context:%s\n&quot;</span>,n_read,read_buf);<br><br>        close(fd);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="lseek"><a href="#lseek" class="headerlink" title="lseek"></a>lseek</h4><p>函数定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">off_t</span> <span class="hljs-title function_">lseek</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">off_t</span> offset, <span class="hljs-type">int</span> whence)</span>;<br></code></pre></td></tr></table></figure><h6 id="lseek函数的作用"><a href="#lseek函数的作用" class="headerlink" title="lseek函数的作用"></a>lseek函数的作用</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c">lseek函数的作用有以下四点：<br><br><span class="hljs-number">1.</span>移动文件指针到文件头：<br><br>lseek(fd, <span class="hljs-number">0</span>, SEEK_SET);<br><br><span class="hljs-number">2.</span>获取当前文件指针的位置<br><br>lseek(fd, <span class="hljs-number">0</span>, SEEK_CUR);<br><br><span class="hljs-number">3.</span>获取文件长度<br><br>lseek(fd, <span class="hljs-number">0</span>, SEEK_END);<br><br><span class="hljs-number">4.</span>拓展文件的长度，当前文件<span class="hljs-number">10b</span>, <span class="hljs-number">110b</span>, 增加了<span class="hljs-number">100</span>个字节<br><br>lseek(fd, <span class="hljs-number">100</span>, SEEK_END)<br>注意：拓展完需要再写一次数据，否则拓展无效<br></code></pre></td></tr></table></figure><p>示例:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> fd = open(<span class="hljs-string">&quot;./file2&quot;</span>, O_RDWR);<br>        <span class="hljs-type">char</span> *buf = <span class="hljs-string">&quot;wangtong shuai!&quot;</span>;<br><br>        <span class="hljs-keyword">if</span>(fd == <span class="hljs-number">-1</span>)<br>        &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;file2 open err fd :%d\n&quot;</span>,fd);<br>                fd = open(<span class="hljs-string">&quot;./file2&quot;</span>,O_RDWR|O_CREAT,<span class="hljs-number">0600</span>);<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;create file2...\n&quot;</span>);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;fd: %d\n&quot;</span>,fd);<br>   <span class="hljs-comment">// ssize_t write(int fd, const void buf[.count], size_t count);</span><br>        <span class="hljs-type">int</span> n_write = write(fd,buf,<span class="hljs-built_in">strlen</span>(buf));<br>        <span class="hljs-keyword">if</span>(n_write != <span class="hljs-number">-1</span>)<br>        &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;write %d byte to file2\n&quot;</span>,n_write);<br>        &#125;<br><br>        <span class="hljs-comment">//close(fd);</span><br>        <span class="hljs-comment">//open(&quot;./file2&quot;, O_RDWR);</span><br><br>        <span class="hljs-comment">//off_t lseek(int fd, off_t offset, int whence);</span><br><br>        lseek(fd,<span class="hljs-number">0</span>,SEEK_SET);<br><br>        <span class="hljs-type">char</span> *read_buf;    <br>                read_buf =(<span class="hljs-type">char</span> *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span>)* n_write + <span class="hljs-number">1</span>);<br><br>        <span class="hljs-type">int</span> n_read = read(fd,read_buf,n_write);<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;read:%d,context:%s\n&quot;</span>,n_read,read_buf);<br><br><br>        close(fd);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/file_build.png" alt="示图"></p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实现linux cp命令</title>
    <link href="/2024/11/19/%E5%AE%9E%E7%8E%B0linux_cp%E5%91%BD%E4%BB%A4/"/>
    <url>/2024/11/19/%E5%AE%9E%E7%8E%B0linux_cp%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>实现思路：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c">./a.out file1 file2<br><br><span class="hljs-number">1.</span> 打开文件<br>open -&gt; file1   O_RDWR<br><br><span class="hljs-number">2.</span> 获取文件长度<br><span class="hljs-type">int</span> size = lseek(fdSrc,<span class="hljs-number">0</span>,SEEK_END);<br><br><br><span class="hljs-number">3.</span> 将文件指针移动到文件头<br>lseek(fdSrc,<span class="hljs-number">0</span>,SEEK_SET);<br><br><span class="hljs-number">4.</span> <span class="hljs-built_in">malloc</span> 申请内存<br>buf = (<span class="hljs-type">char</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span>)*size + <span class="hljs-number">8</span>);<br><br><span class="hljs-number">5.</span> 读数据<br><span class="hljs-type">int</span> n_read = read(fdSrc,buf,size); <br><br><span class="hljs-number">6.</span> 创建 file2<br><span class="hljs-comment">// 以读写、创建、清空模式打开（若文件不存在则创建，若存在则清空）</span><br><span class="hljs-type">int</span> fdDec = open(argv[<span class="hljs-number">2</span>],O_RDWR|O_CREAT|O_TRUNC,<span class="hljs-number">0600</span>); <br><br><span class="hljs-number">7.</span> 写数据<br><span class="hljs-type">int</span> n_write = write(fdDec,buf,<span class="hljs-built_in">strlen</span>(buf)); <br><br><span class="hljs-number">8.</span> 关闭文件<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span> </span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc,<span class="hljs-type">char</span> **argv)</span> &#123; <br> <span class="hljs-type">char</span> *buf;<br> <span class="hljs-keyword">if</span>(argc != <span class="hljs-number">3</span>)<br> &#123;<br> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;params error\n&quot;</span>);<br> <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br> &#125; <br> <span class="hljs-type">int</span> fdSrc = open(argv[<span class="hljs-number">1</span>], O_RDWR);<br> <span class="hljs-type">int</span> size = lseek(fdSrc,<span class="hljs-number">0</span>,SEEK_END);<br> lseek(fdSrc,<span class="hljs-number">0</span>,SEEK_SET); <br> buf = (<span class="hljs-type">char</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span>)*size + <span class="hljs-number">8</span>);<br> <span class="hljs-type">int</span> n_read = read(fdSrc,buf,size); <br> <span class="hljs-type">int</span> fdDec = open(argv[<span class="hljs-number">2</span>],O_RDWR|O_CREAT|O_TRUNC,<span class="hljs-number">0600</span>); <br> <span class="hljs-type">int</span> n_write = write(fdDec,buf,<span class="hljs-built_in">strlen</span>(buf)); <br> close(fdSrc);<br> close(fdDec);<br> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux进程关键概念</title>
    <link href="/2024/11/19/linux%E8%BF%9B%E7%A8%8B%E7%BC%96%E7%A8%8B/"/>
    <url>/2024/11/19/linux%E8%BF%9B%E7%A8%8B%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h4 id="问1-什么是程序，什么是进程，有什么区别？"><a href="#问1-什么是程序，什么是进程，有什么区别？" class="headerlink" title="问1. 什么是程序，什么是进程，有什么区别？"></a>问1. 什么是程序，什么是进程，有什么区别？</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs context">程序是静态的概念，gcc xxx.c –o pro 磁盘中生成pro文件，叫做程序<br><br><br>进程是程序的一次运行活动，通俗点意思是程序跑起来了，系统中就多了一个进程<br></code></pre></td></tr></table></figure><h4 id="问2-如何查看系统中有哪些进程？"><a href="#问2-如何查看系统中有哪些进程？" class="headerlink" title="问2. 如何查看系统中有哪些进程？"></a>问2. 如何查看系统中有哪些进程？</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">1.</span> ps -aux | grep 进程名<br><br><br><span class="hljs-number">2</span> .top 指令 类似于Windowns任务管理器<br></code></pre></td></tr></table></figure><h4 id="问3-什么是进程标识符？"><a href="#问3-什么是进程标识符？" class="headerlink" title="问3. 什么是进程标识符？"></a>问3. 什么是进程标识符？</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">每个进程都有一个非负整数表示的唯一ID,叫做pid，类似身份证<br><br>pid=<span class="hljs-number">0</span>:  称为交换进程（swapper）<br>作用—进程调度<br>pid=<span class="hljs-number">1</span>： init进程<br>作用—系统初始化<br><br>编程调用 getpid() 函数获取自身的进程标识符<br>getppid() 获取父进程的进程标识符<br></code></pre></td></tr></table></figure><h4 id="问4-什么叫父进程，什么叫子进程？"><a href="#问4-什么叫父进程，什么叫子进程？" class="headerlink" title="问4. 什么叫父进程，什么叫子进程？"></a>问4. 什么叫父进程，什么叫子进程？</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs context">进程A创建了进程B那么A叫做父进程，B叫做子进程，父子进程是相对的概念，理解为人类中的父子关系<br></code></pre></td></tr></table></figure><h4 id="问5-C程序的存储空间是如何分配？"><a href="#问5-C程序的存储空间是如何分配？" class="headerlink" title="问5. C程序的存储空间是如何分配？"></a>问5. C程序的存储空间是如何分配？</h4><p><img src="/img/space.png"></p><p><strong>1.</strong> 正文段(<strong>.text</strong>)。这是由CPU执行的机器指令部分。通常，正文段是可共享的，所以即使是频繁执行的程序（如文本编辑器、C编译器和shell等）在存储器中也只需有一个副本，另外，正文段常常是只读的，心防止程序由于意外而修改其指令。</p><p><strong>2.</strong> 初始化数据段(<strong>.data</strong>)。通常将此段称为数据段，它包含了程序中需明确地赋初值的变量(已经初始化的非零全局变量)。例如，C程序中任何函数之外的声明：</p><p>int var&#x3D; 10;</p><p>使此变量以其初值存放在初始化数据段中。</p><p><strong>3.</strong> 未初始化数据段(<strong>.bss</strong>)。通常将此段称为bss段，这一名称来源于时期汇编程序的一个操作符，意思是“<strong>由符号开始的块</strong>“（block started by symbol）,在程序开始执行之前，(通常)内核将此段中的数据初始化为0或空指针。存放程序中未初始化的和零值全局变量。函数外的声明：</p><p>int arry[100];</p><p>使此变量存放在非初始化数据段中。</p><p><strong>text和data段都在可执行文件中，由系统从可执行文件中加载；而bss段不在可执行文件中，由系统初始化。</strong></p><p><strong>4.</strong> 栈(<strong>stack</strong>)。按内存地址由高到低方向生长，其最大大小由编译时确定。自动变量以及每次函数调用时所需保存的信息都存放在此段中。每次函数调用时，其返回地址以及调用者的环境信息（如某些机器寄存器的值）都存放在栈中。然后，最近被调用的函数在栈上为其自动和临时变量分配存储空间。通过心这种方式使用栈，C递归函数可以工作。递归函数每次调用自身时，就用一个新的栈帧，因此一次函数调用实例中的变量集不会影响另一次函数调用实例中的变量。</p><p><strong>5.</strong> 堆(<strong>heap</strong>)。自由申请的空间，按内存地址由低到高方向生长，其大小由系统内存&#x2F;虚拟内存上限决定。通常在堆中进行动态存储分配。由于历史上形成的惯例，堆位于未初始化数据段和栈之间。</p><p> <strong>每个线程都会有自己的栈，但是堆空间是共用的。</strong></p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux进程创建</title>
    <link href="/2024/11/19/linux%E8%BF%9B%E7%A8%8B%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/"/>
    <url>/2024/11/19/linux%E8%BF%9B%E7%A8%8B%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/</url>
    
    <content type="html"><![CDATA[<h4 id="fork-函数"><a href="#fork-函数" class="headerlink" title="fork 函数"></a>fork 函数</h4><h6 id="fork创建一个子进程的一般目"><a href="#fork创建一个子进程的一般目" class="headerlink" title="fork创建一个子进程的一般目"></a>fork创建一个子进程的一般目</h6><p>1.一个父进程希望复制自己,使父子进程同时执行不同的代码段，在这个网络服务进程中是常见的。父进程等待客户端的服务请求。当这种请求到达时，父进程调用fork,使子进程处理此请求。父进程则继续等待下一个服务请求到达。</p><p>2.一个进程要执行一个不同的程序，这对shell常见的情况。在这种情况下，子进程从fork返回后立即调用exec</p><p>在Linux系统中，通过调用fork()来创建一个进程。调用 fork() 的进程称为父进程，新产生的进程称为子进程。在该调用结束时，在返回点这个相同的位子上，父进程恢复执行，子进程开始执行。<strong>fork()系统调用从内核返回两次：一次返回到父进程，另一次返回到新产生的子进程</strong>。</p><p><img src="/img/fork1.png" alt=" "></p><h6 id="使用fork-创建一个进程"><a href="#使用fork-创建一个进程" class="headerlink" title="使用fork()创建一个进程"></a>使用fork()创建一个进程</h6><p>fork函数调用成功，返回两次<br>返回值为0，     代表当前进程是子进程<br>返回值非负数，代表当前进程为父进程</p><p>调用失败，返回-1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    函数原型</span><br><span class="hljs-comment">    #include &lt;unistd.h&gt;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    pid_t fork(void);</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>        <span class="hljs-type">pid_t</span> pid;<br>        <span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><br>        pid = fork();<br><br>        <span class="hljs-keyword">if</span>(pid &gt; <span class="hljs-number">0</span>)<br>        &#123;<br>                <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>                &#123;<br>                        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;father pid:%d a:%d\n&quot;</span>,getppid(),a);<br>                        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;father say child pid is %d\n\n&quot;</span>,pid);<br>                        sleep(<span class="hljs-number">1</span>);<br>                &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>                <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>                &#123;<br>                        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;child pid:%d a:%d\n\n&quot;</span>,getpid(),a++);<br>                        sleep(<span class="hljs-number">1</span>);<br>                &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/fork.png" alt=" "></p><p>a的值的变化说明父子进程有独立的地址空间，互不影响；当在相应的进程中改变全局变量静态变量，都互不影响。</p><h6 id="vfork函数-也可以创建进程，与fork有什么区别"><a href="#vfork函数-也可以创建进程，与fork有什么区别" class="headerlink" title="vfork函数 也可以创建进程，与fork有什么区别"></a>vfork函数 也可以创建进程，与fork有什么区别</h6><p>关键区别一：<br>vfork 直接使用父进程存储空间，不拷贝。</p><p>关键区别二：<br>vfork保证子进程先运行,当子进程调用exit退出后，父进程才执行。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>        <span class="hljs-type">pid_t</span> pid;<br>        <span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<br><br>        pid = vfork();<br><br>        <span class="hljs-keyword">if</span>(pid &gt; <span class="hljs-number">0</span>)<br>        &#123;<br>                <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>                &#123;<br>                        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;this is father print pid:%d a:%d\n&quot;</span>,getpid(),a);<br>                        sleep(<span class="hljs-number">1</span>);<br>                &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>                <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>                &#123;<br>                        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;this is child print pid:%d a:%d\n&quot;</span>,getpid(),a++);<br>                        sleep(<span class="hljs-number">1</span>);<br>                        <span class="hljs-keyword">if</span>(a == <span class="hljs-number">3</span>)<br>                                <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>                &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/vfork.png"></p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>template</title>
    <link href="/2024/11/19/template/"/>
    <url>/2024/11/19/template/</url>
    
    <content type="html"><![CDATA[<p>template文章！  </p><p><img src="/img/bgc.jpg" alt="图片引用">  </p><p>便签  </p><p class="note note-primary">标签</p>  <p class="note note-success">标签</p>  <p class="note note-warning">标签</p>  <p class="note note-info">标签</p><p>行内标签<br><span class="label label-primary">Label</span><br><span class="label label-success">Label</span>  </p><p>按钮<br><a class="btn" href="url" title="title">text</a></p>]]></content>
    
    
    <categories>
      
      <category>test</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
